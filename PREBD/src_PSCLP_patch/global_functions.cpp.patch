321,322c321,322
< 	int distancex = (x2 - x1)*(x2 - x1);
< 	int distancey = (y2 - y1)*(y2 - y1);
---
> 	double distancex = (x2 - x1)*(x2 - x1);
> 	double distancey = (y2 - y1)*(y2 - y1);
324c324
< 	return   sqrt(distancex + distancey);
---
> 	return sqrt(distancex + distancey);
354,475d353
< /*****************************************************************/
< void READ_NEW_FILE(instance *inst)
< /*****************************************************************/
< {
< 
< 	cout << "INSTANCE\t" << inst->input_file << endl;
< 
< 
< 	ifstream in(inst->input_file);
< 	if(!in)
< 	{
< 		ofstream err("Error.log",ios::app);
< 		cout << "File could not be opened. " << endl;
< 		exit(1);
< 	}
< 
< 	in >> inst->n_locations;
< 	in >> inst->n_clients;
< 
< 	cout << "\n\n***LOCATIONS\t" << inst->n_locations << endl;
< 	cout << "***CLIENTS\t" << inst->n_clients << endl;
< 
< 	inst->fixed_cost = (int *) calloc(inst->n_locations, sizeof(int));
< 	inst->demand = (int *) calloc(inst->n_clients, sizeof(int));
< 
< 	inst->x_location= (double *) calloc(inst->n_locations, sizeof(double));
< 	inst->y_location= (double *) calloc(inst->n_locations, sizeof(double));
< 
< 	inst->x_client= (double *) calloc(inst->n_clients, sizeof(double));
< 	inst->y_client= (double *) calloc(inst->n_clients, sizeof(double));
< 
< 	inst->cohordinates_loaded=true;
< 
< 
< 	for ( int j = 0; j < inst->n_locations; j++ )
< 	{
< 		char dummy_char;
< 		int dummy_int;
< 
< 		in >>dummy_char;
< 		in >>dummy_int;
< 
< //		cout << dummy_char << "\t" <<dummy_int << endl;
< //		cin.get();
< 
< 		in >> inst->x_location[j];
< 		in >> inst->y_location[j];
< 		in >> inst->fixed_cost[j];
< 	}
< 
< 	for ( int i = 0; i < inst->n_clients; i++ )
< 	{
< 
< 		char dummy_char;
< 		int dummy_int;
< 
< 		in >>dummy_char;
< 		in >>dummy_int;
< 
< //		cout << dummy_char << "\t" <<dummy_int << endl;
< //		cin.get();
< 
< 		in >> inst->x_client[i];
< 		in >> inst->y_client[i];
< 		in >> inst->demand[i];
< 	}
< 
< 
< #ifdef	print_point
< 	for ( int j = 0; j < inst->n_locations; j++ )
< 	{
< 		cout << "Location\t" <<  j << "\t(x,y)\t" << inst->x_location[j] << "\t" << inst->y_location[j] << endl;
< 	}
< 
< 	for ( int i = 0; i < inst->n_clients; i++ )
< 	{
< 
< 		cout << "Client\t" << i << "\t(x,y)\t" << inst->x_client[i]  << "\t" << inst->y_client[i] << endl;
< 	}
< #endif
< 
< 
< 
< #ifdef	print_distances
< 	cout << "DISTANCES\n";
< 	for ( int j = 0; j < inst->n_locations; j++ )
< 	{
< 		cout << "location\t" << j << endl;
< 		for ( int i = 0; i < inst->n_clients; i++ )
< 		{
< 			cout << "distance to client\t" << i << "\t" << distance_manatthan(inst->x_location[j],inst->y_location[j],inst->x_client[i],inst->y_client[i]) << "\t" << distance(inst->x_location[j],inst->y_location[j],inst->x_client[i],inst->y_client[i])<< endl;
< 
< 		}
< 	}
< 	cin.get();
< #endif
< 
< 
< 
< 	cout << "\n\nBUILDING neighbourhoods\n";
< 	vector < vector < int > > dummy;
< 	for ( int i = 0; i < inst->n_clients; i++ ){
< 
< 		vector < int > local_dummy;
< 
< 		for ( int j = 0; j < inst->n_locations; j++)
< 		{
< 
< 			if(distance(inst->x_client[i],inst->y_client[i],inst->x_location[j],inst->y_location[j]) < inst->RADIUS)
< 			{
< 				local_dummy.push_back(j);
< 			}
< 		}
< 		dummy.push_back(local_dummy);
< 	}
< 
< 	///////////////////////////////////
< 	build_data_structure(inst,dummy);
< 	///////////////////////////////////
< 
< }
< 
484a363
> 	free(inst->singleton);
498,501c377,380
< 		free(inst->x_location);
< 		free(inst->y_location);
< 		free(inst->x_client);
< 		free(inst->y_client);
---
> 		//free(inst->x_location);
> 		//free(inst->y_location);
> 		//free(inst->x_client);
> 		//free(inst->y_client);
655,656c534,535
< 
< 		I_TILDE_CFL[j]=0.0;
---
> 		
>       I_TILDE_CFL[j]=0.0;
745d623
< 
