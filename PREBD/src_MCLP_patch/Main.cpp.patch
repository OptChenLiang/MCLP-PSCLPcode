11a12,13
> #include "struct.h"
> #include "read.h"
15d16
< 
19,20c20,26
< 
< 	inst.input_file = (char *) calloc(1000, sizeof(char));
---
> 	mystr inst1;
> //Presolving settings
>    inst1.isPSCLP = false;
> 	inst.algorithm = 2;
>    //Input facilities file and clients file
>    inst1.input_file_f = (char *) calloc(1000, sizeof(char)); 
>    inst1.input_file_c = (char *) calloc(1000, sizeof(char)); 
23c29,30
< 	if (argc == 6)
---
>    int exec = 0;
> 	if (argc >= 9)
25,29c32,52
< 		/*Param1*/strcpy(inst.input_file, argv[1]);
< 		/*Param2*/inst.algorithm=atoi(argv[2]);
< 		/*Param3*/inst.timelimit=atof(argv[3]);
< 		/*Param4*/inst.RADIUS=atof(argv[4]);
< 		/*Param5*/inst.BUDGET=atof(argv[5]);
---
>       /*Param1*/exec = atoi(argv[1]);
> 		/*Param2*/strcpy(inst1.input_file_f, argv[2]);
> 		/*Param3*/strcpy(inst1.input_file_c, argv[3]);
>       /*Param4*/inst1.n_locations=atoi(argv[4]);             
>       /*Param5*/inst1.n_clients=atoll(argv[5]);
> 		/*Param6*/inst.timelimit=atof(argv[6]);
> 		/*Param7*/inst1.RADIUS=atof(argv[7]);
>       cout << "***RADIUS " << inst1.RADIUS << endl;
>       if( inst1.isPSCLP )
>       {
>          inst1.COVERING_DEMAND=atof(argv[8]);
>          cout << "***BUDGET " << inst.COVERING_DEMAND << endl;
>       }
>       else
>       {
>          inst1.BUDGET=atof(argv[8]);
>          cout << "***BUDGET " << inst1.BUDGET << endl;
>       }
>       inst1.seed = -1;
>       if (argc >= 10)
>          inst1.seed=atof(argv[9]);
33a57
> 		//Error input
35,40c59,67
< 		cout << "Param1:\t instance name\n";
< 		cout << "Param2:\t algorithm\n";
< 		cout << "Param3:\t time limit\n";
< 		cout << "Param4:\t RADIUS\n";
< 		cout << "Param5:\t BUDGET\n";
< 
---
>       cout << "Param1:\t settings\n";
> 		cout << "Param2:\t file of facilities\n";
>       cout << "Param3:\t customers file (can be NULL and then generate customers randomly when running the code)\n";
>       cout << "Param4:\t number of facilities\n";
>       cout << "Param5:\t number of customers\n";
> 		cout << "Param6:\t time limitation in seconds\n";
> 		cout << "Param7:\t covering radius\n";
> 		cout << "Param8:\t budget in the MCLP or covering demand in the PSCLP, <= 1 means percentage\n";
> 		cout << "Param9:\t  CPXPARAM_RandomSeed for CPLEX\n";
42a70,86
>    
>    inst1.isIA = true;
>    inst1.isSA = true;
>    inst1.isD = true;
>    switch (exec)
>    {
>       case 0: //NO_PRE
>          inst1.isIA = false;
>          inst1.isSA = false;
>          inst1.isD = false;
>          break;
>       case 1: //ALL
>          inst1.isIA = true;
>          inst1.isSA = true;
>          inst1.isD = true;
>          break;
>    }
45a90
>    inst1.coordinates_loaded = false;
48,49c93,94
< 	cout << "***RADIUS\t" << inst.RADIUS << endl;
< 	cout << "***BUDGET\t" << inst.BUDGET << endl;
---
> 	cout << "***RADIUS\t" << inst1.RADIUS << endl;
> 	cout << "***BUDGET\t" << inst1.BUDGET << endl;
54,55c99,108
< 
< 	READ_NEW_FILE(&inst);
---
> 	//Read facility and client files if files exist and implement presolving methods
> 	read_file(&inst1);
> 	//Build data structures based on read data
> 	READ_NEW_FILE1(&inst, &inst1);
>    //Presolving time statistics
>    cout<<"presolve_IA: "<<inst1.presolve_IA_time<<endl;
>    cout<<"presolve_D: "<<inst1.presolve_D_time<<endl;
>    inst1.presolve_time = inst1.presolve_IA_time
>       + inst1.presolve_D_time;
>    cout<<"Presolve Time: "<<inst1.presolve_time<<endl;
90c143
< 		solve_model_DFL_BEN_2(&inst);
---
> 		solve_model_DFL_BEN_2(&inst, &inst1);
96,97c149,152
< 
< 	free(inst.input_file);
---
> 	//Free memory
> 	free(inst1.input_file_f);
> 	free(inst1.input_file_c);
>    free_data(&inst1);
101c156
< 	printf("\nDONE!");
---
> 	printf("\nDONE!\n");
