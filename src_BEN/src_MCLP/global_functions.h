#ifndef FUNCTIONS_local_HEADER
#define FUNCTIONS_local_HEADER

#include "global_variables.h"


/*****************************************************************/
double compute_single_location_coverage(instance *inst, int location);
/*****************************************************************/

/*****************************************************************/
double compute_subset_location_coverage(instance *inst,double *y);
/*****************************************************************/

/*****************************************************************/
int compute_subset_location_coverage_clients(instance *inst,double *y,bool *reached_clients);
/*****************************************************************/

/*****************************************************************/
void compute_location_coverage(instance *inst);
/*****************************************************************/

/*****************************************************************/
void build_data_structure(instance *inst,vector < vector < int > > dummy);
/*****************************************************************/

/*****************************************************************/
double distance(double x1,double y1,double x2, double y2);
/*****************************************************************/

/*****************************************************************/
double distance_manatthan(double x1,double y1,double x2, double y2);
/*****************************************************************/

/*****************************************************************/
void READ_NEW_FILE(instance *inst);
/*****************************************************************/

/*****************************************************************/
void free_data(instance *inst);
/*****************************************************************/

/*****************************************************************/
void  compute_super_rho_DFL(instance *inst,double *DFL_super_rho,double *DFL_SET);
/*****************************************************************/

/*****************************************************************/
void  compute_super_rho_CFL(instance *inst,double *CFL_super_rho,double *CFL_SET);
/*****************************************************************/

/*****************************************************************/
void  compute_single_rho_CFL(instance *inst,double *CFL_single_rho,double *CFL_SET);
/*****************************************************************/

/*****************************************************************/
void  compute_single_rho_DFL(instance *inst,double *DFL_single_rho,double *DFL_SET);
/*****************************************************************/

/*****************************************************************/
void load_I_TILDE_CFL(instance *inst, bool rounding,double *I_TILDE_CFL,double *CFL_BEN_2_Y);
/*****************************************************************/

/*****************************************************************/
void load_I_TILDE_DFL(instance *inst, bool rounding,double *I_TILDE_DFL,double *DFL_BEN_2_Y);
/*****************************************************************/

/*****************************************************************/
void comb_solve_model_CFL_BEN_2_AUX_1(instance *inst,double *I_TILDE,double *AUX_SOL);
/*****************************************************************/

/*****************************************************************/
void comb_solve_model_CFL_BEN_2_AUX_2(instance *inst,double *I_TILDE,double *AUX_SOL);
/*****************************************************************/

/*****************************************************************/
void comb_solve_model_DFL_BEN_2_AUX_1(instance *inst,double *I_TILDE,double *AUX_SOL);
/*****************************************************************/

/*****************************************************************/
void comb_solve_model_DFL_BEN_2_AUX_2(instance *inst,double *I_TILDE,double *AUX_SOL);
/*****************************************************************/

#endif
